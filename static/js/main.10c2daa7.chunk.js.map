{"version":3,"sources":["components/MovieItem.js","components/MoviList.js","components/SearchBar.js","components/DropDownList.js","components/MenuBar.js","components/NavBar.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["MovieItem","movie","useState","isOpen","setIsOpen","closeModal","key","imdbID","className","src","Poster","alt","Title","onClick","onRequestClose","ariaHideApp","Type","Year","MoviList","movies","map","SearchBar","props","searchTChange","e","setState","searchTerm","target","value","searchClicked","preventDefault","onSearchTerm","state","type","name","id","placeholder","this","onChange","Component","DropDownList","href","MenuBar","ckMenu","NavBar","Footer","role","aria-label","App","searchMovies","term","length","fetchMovies","then","res","Search","totalCount","totalResults","search","fetch","APIURL","json","componentDidMount","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10c2daa7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Zoom from \"react-reveal/Zoom\";\r\nimport Modal from \"react-modal\";\r\n\r\nconst MovieItem = ({ movie }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const openModal = () => {\r\n    setIsOpen(true);\r\n  };\r\n  const closeModal = () => {\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        key={movie.imdbID}\r\n        className=\"flex flex-col items-center my-4 bg-cards flex-wrap\"\r\n      >\r\n        <button className=\"mt-3 ml-3 mr-3 px-5\">\r\n          <img src={movie.Poster} alt={movie.Title} />\r\n        </button>\r\n        <div className=\"w-full p-4 flex flex-col items-center justify-between\">\r\n          <h5>\r\n            <strong>{movie.Title}</strong>\r\n          </h5>\r\n          <button\r\n            className=\"p-2 mt-2 bg-blue-500 hover:bg-blue-600 rounded\"\r\n            onClick={openModal}\r\n          >\r\n            VIEW DETAIL\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <Modal isOpen={isOpen} onRequestClose={closeModal} ariaHideApp={false}>\r\n        <Zoom>\r\n          <button\r\n            className=\"text-2xl font-bold text-black top-0 right-0 float-right cursor-pointer\"\r\n            onClick={closeModal}\r\n          >\r\n            X\r\n          </button>\r\n          <div className=\"flex flex-col md:flex-row w-2/3 mx-auto\">\r\n            <div className=\"p-2 md:p-4\">\r\n              <img src={movie.Poster} alt={movie.Title} />\r\n            </div>\r\n            <div className=\"p-2 md:p-4 flex flex-col justify-center\">\r\n              <h2>\r\n                <strong>Title:</strong> {movie.Title}\r\n              </h2>\r\n              <p>\r\n                <strong>Type:</strong> {movie.Type}\r\n              </p>\r\n              <p>\r\n                <strong>Year:</strong> {movie.Year}\r\n              </p>\r\n              <p>\r\n                <strong>imdbID:</strong> {movie.imdbID}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </Zoom>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieItem;\r\n","import React from \"react\";\r\nimport MovieItem from \"./MovieItem\";\r\n\r\nfunction MoviList({ movies }) {\r\n  if (!movies) {\r\n    return (\r\n      <div>\r\n        <p className=\"text-red-600 font-light\">A NEW SEARCH TRY?</p>\r\n        <h2 className=\"text-2xl text-gray-500 font-semibold\">\r\n          Found Nothing We Have\r\n        </h2>\r\n        <p className=\"text-sm\">\r\n          SORRY, WE COULDN'T FIND ANY MOVIES.\r\n          <i className=\"far fa-grin-beam-sweat ml-1\"></i>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"mx-2 grid\">\r\n      {movies.map((movie) => (\r\n        <MovieItem key={movie.imdbID} movie={movie} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MoviList;\r\n","import React, { Component } from \"react\";\r\n\r\nclass SearchBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchTerm: \"\",\r\n    };\r\n  }\r\n\r\n  searchTChange = (e) => {\r\n    this.setState({\r\n      searchTerm: e.target.value,\r\n    });\r\n  };\r\n\r\n  searchClicked = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSearchTerm(this.state.searchTerm);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"w-full\">\r\n        <form className=\"flex\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"user_search\"\r\n            id=\"search\"\r\n            className=\"bg-input-search py-2 md:focus:w-full\"\r\n            placeholder=\"Search a Film....\"\r\n            value={this.state.searchTerm}\r\n            onChange={this.searchTChange}\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            className=\"p-2 bg-blue-500 hover:bg-blue-600 rounded md:px-6 lg:px-8\"\r\n            onClick={this.searchClicked}\r\n          >\r\n            Search\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\n\r\nfunction DropDownList() {\r\n  return (\r\n    <ul>\r\n      <a\r\n        href=\"/\"\r\n        className=\"block mb-1 p-2 bg-blue-600 hover:bg-blue-700 rounded\"\r\n      >\r\n        <li>HOME-FILM</li>\r\n      </a>\r\n      <a\r\n        href=\"/\"\r\n        className=\"block mb-1 p-2 bg-blue-600 hover:bg-blue-700 rounded\"\r\n      >\r\n        <li>SERIE-TV</li>\r\n      </a>\r\n      <a\r\n        href=\"/\"\r\n        className=\"block mb-1 p-2 bg-blue-600 hover:bg-blue-700 rounded\"\r\n      >\r\n        <li>COMMUNITY</li>\r\n      </a>\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default DropDownList;\r\n","import React, { Component } from \"react\";\r\nimport DropDownList from \"./DropDownList\";\r\n\r\nclass MenuBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n\r\n  ckMenu = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"flex flex-col items-center mr-3\">\r\n        <button\r\n          className=\"block self-end focus:outline-none\"\r\n          onClick={this.ckMenu}\r\n        >\r\n          <span>MENU</span>\r\n\r\n          {this.state.isOpen ? (\r\n            <i className=\"fas fa-times-circle text-white ml-2\"></i>\r\n          ) : (\r\n            <i className=\"fas fa-bars text-white ml-2\"></i>\r\n          )}\r\n        </button>\r\n        <div className=\"w-full\">{this.state.isOpen && <DropDownList />}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MenuBar;\r\n","import React from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport MenuBar from \"./MenuBar\";\r\n\r\nfunction NavBar({ onSearchTerm }) {\r\n  return (\r\n    <>\r\n      <SearchBar onSearchTerm={onSearchTerm} />\r\n      <nav className=\"mt-2 pt-2 border-t border-gray-700\">\r\n        <MenuBar />\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"bg-my h-32 flex flex-col justify-center items-center\">\r\n      <p>Copyright © 2020 Andrew Nelli, all rights reserved</p>\r\n\r\n      <p>\r\n        Made with{\" \"}\r\n        <span role=\"img\" aria-label=\"hearth\">\r\n          💙\r\n        </span>\r\n        &\r\n        <span role=\"img\" aria-label=\"coffe\">\r\n          ☕\r\n        </span>\r\n      </p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport \"./main.css\";\nimport MoviList from \"./components/MoviList\";\nimport NavBar from \"./components/NavBar\";\nimport Footer from \"./components/Footer\";\n\nconst APIKEY = \"6d25fa48\";\nconst APIURL = \"https://www.omdbapi.com/\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: [],\n      totalCount: 0,\n    };\n  }\n\n  searchMovies = (term = \"\") => {\n    if (term.length < 3) {\n      return;\n    }\n    this.fetchMovies(term).then((res) => {\n      this.setState({\n        movies: res.Search,\n        totalCount: res.totalResults,\n      });\n    });\n  };\n\n  fetchMovies = (search) => {\n    return fetch(APIURL + \"?apikey=\" + APIKEY + \"&s=\" + search).then((res) =>\n      res.json()\n    );\n  };\n\n  componentDidMount = () => {\n    this.searchMovies(\"back to the future\");\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"bg-cards p-2 w-full fixed top-0\">\n          <h1 className=\"text-2xl text-red-500 px-4 pb-2 pt-1 font-extrabold\">\n            New My movies App\n          </h1>\n          <NavBar onSearchTerm={this.searchMovies} />\n        </header>\n        <section className=\"dioSanto min-h-screen\">\n          <MoviList movies={this.state.movies} />\n        </section>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./main.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}